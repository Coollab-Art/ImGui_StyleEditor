/* -----------------------------------------------------------------------------
 * This file was automatically generated by a Python script.
 * PLEASE DON'T EDIT IT DIRECTLY, your changes would be overwritten the next time the script is run.
 * Instead, go to "generate_code.py" and edit the "register_all_imgui_color_elements" function there.
 * -----------------------------------------------------------------------------
 */

config.register_element({
    "Text",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_Text];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_Text] = color;
    },
    "",
});

config.register_element({
    "TextDisabled",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TextDisabled];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TextDisabled] = color;
    },
    "",
});

config.register_element({
    "WindowBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_WindowBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_WindowBg] = color;
    },
    "Background of normal windows",
});

config.register_element({
    "ChildBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ChildBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ChildBg] = color;
    },
    "Background of child windows",
});

config.register_element({
    "PopupBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_PopupBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_PopupBg] = color;
    },
    "Background of popups, menus, tooltips windows",
});

config.register_element({
    "Border",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_Border];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_Border] = color;
    },
    "",
});

config.register_element({
    "BorderShadow",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_BorderShadow];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_BorderShadow] = color;
    },
    "",
});

config.register_element({
    "FrameBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_FrameBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_FrameBg] = color;
    },
    "Background of checkbox, radio button, plot, slider, text input",
});

config.register_element({
    "FrameBgHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_FrameBgHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_FrameBgHovered] = color;
    },
    "",
});

config.register_element({
    "FrameBgActive",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_FrameBgActive];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_FrameBgActive] = color;
    },
    "",
});

config.register_element({
    "TitleBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TitleBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TitleBg] = color;
    },
    "Title bar",
});

config.register_element({
    "TitleBgActive",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TitleBgActive];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TitleBgActive] = color;
    },
    "Title bar when focused",
});

config.register_element({
    "TitleBgCollapsed",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TitleBgCollapsed];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TitleBgCollapsed] = color;
    },
    "Title bar when collapsed",
});

config.register_element({
    "MenuBarBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_MenuBarBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_MenuBarBg] = color;
    },
    "",
});

config.register_element({
    "ScrollbarBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ScrollbarBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ScrollbarBg] = color;
    },
    "",
});

config.register_element({
    "ScrollbarGrab",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ScrollbarGrab];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ScrollbarGrab] = color;
    },
    "",
});

config.register_element({
    "ScrollbarGrabHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ScrollbarGrabHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ScrollbarGrabHovered] = color;
    },
    "",
});

config.register_element({
    "ScrollbarGrabActive",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ScrollbarGrabActive];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ScrollbarGrabActive] = color;
    },
    "",
});

config.register_element({
    "CheckMark",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_CheckMark];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_CheckMark] = color;
    },
    "Checkbox tick and RadioButton circle",
});

config.register_element({
    "SliderGrab",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_SliderGrab];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_SliderGrab] = color;
    },
    "",
});

config.register_element({
    "SliderGrabActive",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_SliderGrabActive];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_SliderGrabActive] = color;
    },
    "",
});

config.register_element({
    "Button",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_Button];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_Button] = color;
    },
    "",
});

config.register_element({
    "ButtonHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ButtonHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ButtonHovered] = color;
    },
    "",
});

config.register_element({
    "ButtonActive",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ButtonActive];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ButtonActive] = color;
    },
    "",
});

config.register_element({
    "Header",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_Header];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_Header] = color;
    },
    "Header* colors are used for CollapsingHeader, TreeNode, Selectable, MenuItem",
});

config.register_element({
    "HeaderHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_HeaderHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_HeaderHovered] = color;
    },
    "",
});

config.register_element({
    "HeaderActive",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_HeaderActive];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_HeaderActive] = color;
    },
    "",
});

config.register_element({
    "Separator",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_Separator];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_Separator] = color;
    },
    "",
});

config.register_element({
    "SeparatorHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_SeparatorHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_SeparatorHovered] = color;
    },
    "",
});

config.register_element({
    "SeparatorActive",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_SeparatorActive];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_SeparatorActive] = color;
    },
    "",
});

config.register_element({
    "ResizeGrip",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ResizeGrip];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ResizeGrip] = color;
    },
    "Resize grip in lower-right and lower-left corners of windows.",
});

config.register_element({
    "ResizeGripHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ResizeGripHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ResizeGripHovered] = color;
    },
    "",
});

config.register_element({
    "ResizeGripActive",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ResizeGripActive];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ResizeGripActive] = color;
    },
    "",
});

config.register_element({
    "InputTextCursor",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_InputTextCursor];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_InputTextCursor] = color;
    },
    "InputText cursor/caret",
});

config.register_element({
    "TabHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TabHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TabHovered] = color;
    },
    "Tab background, when hovered",
});

config.register_element({
    "Tab",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_Tab];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_Tab] = color;
    },
    "Tab background, when tab-bar is focused & tab is unselected",
});

config.register_element({
    "TabSelected",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TabSelected];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TabSelected] = color;
    },
    "Tab background, when tab-bar is focused & tab is selected",
});

config.register_element({
    "TabSelectedOverline",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TabSelectedOverline];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TabSelectedOverline] = color;
    },
    "Tab horizontal overline, when tab-bar is focused & tab is selected",
});

config.register_element({
    "TabDimmed",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TabDimmed];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TabDimmed] = color;
    },
    "Tab background, when tab-bar is unfocused & tab is unselected",
});

config.register_element({
    "TabDimmedSelected",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TabDimmedSelected];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TabDimmedSelected] = color;
    },
    "Tab background, when tab-bar is unfocused & tab is selected",
});

config.register_element({
    "TabDimmedSelectedOverline",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TabDimmedSelectedOverline];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TabDimmedSelectedOverline] = color;
    },
    "..horizontal overline, when tab-bar is unfocused & tab is selected",
});

config.register_element({
    "DockingPreview",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_DockingPreview];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_DockingPreview] = color;
    },
    "Preview overlay color when about to docking something",
});

config.register_element({
    "DockingEmptyBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_DockingEmptyBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_DockingEmptyBg] = color;
    },
    "Background color for empty node (e.g. CentralNode with no window docked into it)",
});

config.register_element({
    "PlotLines",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_PlotLines];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_PlotLines] = color;
    },
    "",
});

config.register_element({
    "PlotLinesHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_PlotLinesHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_PlotLinesHovered] = color;
    },
    "",
});

config.register_element({
    "PlotHistogram",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_PlotHistogram];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_PlotHistogram] = color;
    },
    "",
});

config.register_element({
    "PlotHistogramHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_PlotHistogramHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_PlotHistogramHovered] = color;
    },
    "",
});

config.register_element({
    "TableHeaderBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TableHeaderBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TableHeaderBg] = color;
    },
    "Table header background",
});

config.register_element({
    "TableBorderStrong",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TableBorderStrong];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TableBorderStrong] = color;
    },
    "Table outer and header borders (prefer using Alpha=1.0 here)",
});

config.register_element({
    "TableBorderLight",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TableBorderLight];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TableBorderLight] = color;
    },
    "Table inner borders (prefer using Alpha=1.0 here)",
});

config.register_element({
    "TableRowBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TableRowBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TableRowBg] = color;
    },
    "Table row background (even rows)",
});

config.register_element({
    "TableRowBgAlt",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TableRowBgAlt];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TableRowBgAlt] = color;
    },
    "Table row background (odd rows)",
});

config.register_element({
    "TextLink",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TextLink];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TextLink] = color;
    },
    "Hyperlink color",
});

config.register_element({
    "TextSelectedBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TextSelectedBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TextSelectedBg] = color;
    },
    "Selected text inside an InputText",
});

config.register_element({
    "TreeLines",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_TreeLines];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_TreeLines] = color;
    },
    "Tree node hierarchy outlines when using ImGuiTreeNodeFlags_DrawLines",
});

config.register_element({
    "DragDropTarget",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_DragDropTarget];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_DragDropTarget] = color;
    },
    "Rectangle highlighting a drop target",
});

config.register_element({
    "NavCursor",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_NavCursor];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_NavCursor] = color;
    },
    "Color of keyboard/gamepad navigation cursor/rectangle, when visible",
});

config.register_element({
    "NavWindowingHighlight",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_NavWindowingHighlight];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_NavWindowingHighlight] = color;
    },
    "Highlight window when using CTRL+TAB",
});

config.register_element({
    "NavWindowingDimBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_NavWindowingDimBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_NavWindowingDimBg] = color;
    },
    "Darken/colorize entire screen behind the CTRL+TAB window list, when active",
});

config.register_element({
    "ModalWindowDimBg",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_ModalWindowDimBg];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_ModalWindowDimBg] = color;
    },
    "Darken/colorize entire screen behind a modal window, when one is active",
});

config.register_element({
    "SliderGrabHovered",
    []() {
        return ImGui::GetStyle().Colors[ImGuiCol_SliderGrabHovered];
    },
    [](ImVec4 const& color) {
        ImGui::GetStyle().Colors[ImGuiCol_SliderGrabHovered] = color;
    },
    "",
});
